generator client {
  provider = "prisma-client-js"
  output   = "../../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comment {
  id          String    @id @default(uuid()) @map("id")
  createdAt   DateTime  @default(now()) @map("created_at")
  userId      String    @map("user_id")
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId   String    @map("product_id")
  rating      Int
  content     String

  @@index([createdAt, userId, productId])
  @@map("comments")
}

model Product {
  id                String      @id @default(uuid()) @map("id")
  createdAt         DateTime    @default(now()) @map("created_at")
  rating            Int?
  name              String
  backgroundImage   String?     @map("background_image")
  userLevel         String
  type              String
  duration          String
  price             Int?
  amountOfCalories  Int?        @map("amount_of_calories")
  description       String
  sex               String
  video             String
  coach             String
  isSpecial         Boolean     @map("is_special")
  comments          Comment[]

  @@index([createdAt, name, type, sex, coach, userLevel, isSpecial])
  @@map("products")
}

model Balance {
  id          String    @id @default(uuid()) @map("id")
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @map("user_id")
  productId   String    @map("product_id")
  quantity    Int

  @@map("balances")
}

model User {
  id                      String      @id @default(uuid()) @map("id")
  createdAt               DateTime    @default(now()) @map("created_at")
  login                   String
  email                   String
  passwordHash            String      @map("password_hash")
  avatar                  String?
  description             String?
  location                String
  backgroundImage         String?     @map("background_image")
  sex                     String
  birthday                DateTime
  level                   String
  trainingType            String      @map("training_type")
  timeForTraining         String      @map("time_for_training")
  caloriesToReset         Int         @map("calories_to_reset")
  caloriesToResetPerDay   Int         @map("calories_to_reset_per_day")
  isReadyToTrain          Boolean     @map("is_ready_to_train")
  balances                Balance[]
  orders                  Order[]

  @@index([email, login, sex])
  @@map("users")
}

model Order {
  id            String      @id @default(uuid()) @map("id")
  createdAt     DateTime    @default(now()) @map("created_at")
  type          String
  productId     String      @map("product_id")
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @map("user_id")
  price         Int
  quantity      Int
  sum           Int
  paymentType   String      @map("payment_type")

  @@index([createdAt, type, paymentType])
  @@map("orders")
}
